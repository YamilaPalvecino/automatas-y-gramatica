Cómo permitir que el autómata ignore acciones
Aunque los tres autómatas de la Figura 2.1 reflejan los comportamientos de los tres participantes de forma independiente, faltan algunas transiciones. Por ejemplo, la tienda no se ve afectada por un mensaje cancelar, por lo que si el cliente realiza la acción cancelar, la tienda permanecerá en el estado en el que se encuentre. Sin embargo, en la definición formal de autómata finito, que veremos en la Sección 2.2, cuando un autómata recibe una entrada X, éste debe seguir el arco etiquetado como X desde el estado en que está hasta algún nuevo estado.
Así, el autómata de la tienda necesita un arco adicional desde cada uno de los estados a sí mismo, etiquetado como cancelar. De este modo, cuando se ejecuta la acción cancelar, el autómata de la tienda puede realizar una “transición” sobre dicha entrada, con el efecto de permanecer en el estado en que se encontraba. Sin estos arcos  adicionales, cuando se ejecutara una acción cancelar, el autómata de la tienda “detendría su ejecución”; es decir, no estaría en ningún estado y sería imposible que efectuara acciones posteriores.
Otro problema potencial es que uno de los participantes puede, intencionadamente o por error, enviar un mensaje inesperado y no debemos permitir que esta acción haga que uno de los autómatas detenga su ejecución.
Por ejemplo, supongamos que el cliente decide ejecutar una segunda vez la acción pagar, mientras que la tienda se encuentra en el estado e. Dado que este estado no dispone de un arco con la etiqueta pagar, el autómata de la tienda detendrá su ejecución antes de poder recibir la transferencia del banco. En resumen, tenemos que añadir
al autómata de la Figura 2.1 arcos sobre ciertos estados, con etiquetas para todas aquellas acciones que deban ser ignoradas cuando se esté en dicho estado; los autómatas completos se muestran en la Figura 2.2. Con el fin de ahorrar espacio, combinamos las etiquetas sobre un arco en lugar de dibujar varios arcos con los mismos puntos extremos pero diferentes etiquetas. Los dos tipos de acciones que tenemos que ignorar son:
1. Acciones que son irrelevantes para el participante implicado. Como podemos ver, la única acción irrelevante para la tienda es cancelar, por lo que cada uno de sus siete estados tiene un arco etiquetado como cancelar. Para el banco, tanto pagar como suministrar son irrelevantes, por lo que añadimos a cada uno de los estados del banco un arco etiquetado como pagar, suministrar. Para el cliente, suministrar, librar
y transferir son acciones irrelevantes, por lo que añadimos arcos con estas etiquetas. De hecho, este autómata permanece en su único estado para cualquier secuencia de entradas, por lo que el autómata del cliente no tiene efecto sobre el funcionamiento del sistema global. Por supuesto, el cliente continúa siendo un participante, ya que es el cliente quien inicia las acciones de pagar y cancelar. Sin embargo, como ya hemos mencionado, la cuestión de quién inicia las acciones no tiene nada que ver con el comportamiento del autómata.
2. Acciones que debemos impedir que detengan la ejecución de un autómata. Como ya hemos mencionado, no podemos permitir que el cliente detenga la ejecución de la tienda ejecutando una segunda vez la acción pagar, por lo que hemos añadido un arco con la etiqueta pagar a todos los estados excepto al estado a (en el que la acción pagar es la acción esperada y es por tanto relevante). También hemos añadido arcos con la etiqueta cancelar a los estados 3 y 4 del banco, para impedir al cliente detener la ejecución del autómata del banco intentando cancelar el pago una vez que éste ha sido librado. El banco ignora lógicamente una solicitud de este tipo. Asimismo, los estados 3 y 4 disponen de arcos etiquetados como librar. El almacén no debe intentar librar dos veces el mismo dinero, pero si lo hace, el banco debe ignorar esa segunda solicitud.
